assignment 4
# Import necessary libraries
import tensorflow as tf
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
from tensorflow.keras.layers import LSTM, Dense
from tensorflow.keras import Sequential
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score

# Suppress warnings
warnings.filterwarnings("ignore")

# Read data from CSV in local directory
df = pd.read_csv("GOOGL.csv", thousands=',')
df.head()

# Plot stock prices
axis1 = df.plot(x="Date", y=['Open', 'High', 'Low', 'Close'], figsize=(10, 7),
                title="Open, High, Low, Close Stock Prices Of Google Stocks")
axis1.set_ylabel("Stock Prices")

# Plot stock volume
axis2 = df.plot(x="Date", y=['Volume'], figsize=(10, 7))
axis2.set_ylabel("Stock Volume")

# Check for missing values
df.isnull().sum()

# Outlier detection using boxplots
df[['Open', 'High', 'Low', 'Close', 'Volume']].plot(kind='box', layout=(1, 5),
    subplots=True, sharex=False, sharey=False, figsize=(10, 7), color='red')

# Drop any missing values
df.dropna(inplace=True)

# Normalize selected columns
scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(df[['Open', 'High', 'Low', 'Close', 'Volume']])
scaled_df = pd.DataFrame(scaled_data, columns=['Open', 'High', 'Low', 'Close', 'Volume'])

# Create sequences for LSTM input
def create_sequences(data, sequence_length=10):
    X, y = [], []
    for i in range(len(data) - sequence_length):
        X.append(data[i:i + sequence_length])
        y.append(data[i + sequence_length][3])  # 'Close' price
    return np.array(X), np.array(y)

sequence_length = 10
X, y = create_sequences(scaled_data, sequence_length)

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build LSTM model
model = Sequential([
    LSTM(50, return_sequences=True, input_shape=(X.shape[1], X.shape[2])),
    LSTM(50),
    Dense(1)
])
model.compile(optimizer='adam', loss='mse')

# Train the model
history = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=20, batch_size=32)

# Predict and evaluate
y_pred = model.predict(X_test)
print("RÂ² Score:", r2_score(y_test, y_pred))

# Plot actual vs predicted values
plt.figure(figsize=(10, 6))
plt.plot(y_test, label='Actual')
plt.plot(y_pred, label='Predicted')
plt.title('Google Stock Price Prediction')
plt.xlabel('Time')
plt.ylabel('Normalized Close Price')
plt.legend()
plt.show()
